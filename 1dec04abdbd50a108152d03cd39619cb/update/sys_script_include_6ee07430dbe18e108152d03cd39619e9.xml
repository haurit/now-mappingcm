<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_mapping_cm.MappingConfigLookup</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>MappingConfigLookup</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var MappingConfigLookup = Class.create();
MappingConfigLookup.prototype = {
	initialize: function () {
		this.bLog = false;
		this._mapCfgCommon = new MappingConfigCommon();
		var sConnectionAndCredentialAlias = gs.getProperty('x_snc_mapping_cm.connection_credential_alias');
		this.sConnectionAndCredentialAlias = sConnectionAndCredentialAlias;
		if (sConnectionAndCredentialAlias) {
			this._gtRESTAPI = new global.GlobalToolsRESTAPI(sConnectionAndCredentialAlias);
		} // if property
		this._gtArray = new global.GlobalToolsArray();
		this._gtTable = new global.GlobalToolsTable();
	}, // function initialize

	// BR MappingLookupEmptyDisplayValue
	processBusinessRule: function (grMappingCfg) {
		try {
			if (this.sConnectionAndCredentialAlias) {
				var sMappingId = grMappingCfg.getUniqueValue();
				var sRefOrChoiceTable = grMappingCfg.getValue('choice_table');
				var sChoiceField = grMappingCfg.getValue('choice_field');
				var sSourceValue = grMappingCfg.getValue('source_value');
				var sDependentQuery = this._mapCfgCommon.getDependentQuery(grMappingCfg, true);
				sDependentQuery = (sDependentQuery) ? '^' + sDependentQuery : '';
				var sTargetTable = (sChoiceField) ? 'sys_choice' : sRefOrChoiceTable;
				var sDisplayField = (sChoiceField) ? 'label' : this._gtTable.getDisplayField(sTargetTable);
				var sQuery = '';
				if (sChoiceField) {
					sQuery = 'name=' + sRefOrChoiceTable + '^element=' + sChoiceField + '^value=' + sSourceValue + sDependentQuery;
				} else {
					sQuery = 'sys_id=' + sSourceValue;
				} // if choice
				var oResponse = this._gtRESTAPI.doNOWRESTQuery(sTargetTable, sQuery, '', '1');
				if ((oResponse) && (this._gtArray.isValidArray(oResponse)) && ((oResponse[0].hasOwnProperty(sDisplayField)) || (oResponse[0].hasOwnProperty('name')) || (oResponse[0].hasOwnProperty('number')))) {
					sDisplayValue = oResponse[0][sDisplayField];
					sDisplayValue = ((!sDisplayValue) && (oResponse[0].hasOwnProperty('name'))) ? oResponse[0]['name'] : sDisplayValue;
					sDisplayValue = ((!sDisplayValue) && (oResponse[0].hasOwnProperty('number'))) ? oResponse[0]['number'] : sDisplayValue;
					if ((sDisplayValue) && (sSourceValue != sDisplayValue)) {
						var grMappingCfgUpdate = new GlideRecord('x_snc_mapping_cm_mapping_config');
						grMappingCfgUpdate.addEncodedQuery('sys_id=' + sMappingId);
						grMappingCfgUpdate.setWorkflow(false);
						grMappingCfgUpdate.autoSysFields(false);
						grMappingCfgUpdate.query();
						if (grMappingCfgUpdate.next()) {
							grMappingCfgUpdate.setValue('source_display_value', sDisplayValue);
							if (!grMappingCfgUpdate.update()) {
								gs.error('MappingConfigManager.doMappingValue error updating mapping record: ' + grMappingCfg.getLastErrorMessage());
							} // if update failed
						} // if mapping found
					} else {
						if (this.bLog) { gs.error('MappingConfigLookup.processBusinessRule display value (' + sDisplayValue + ') empty or same as source value (' + sSourceValue + '): ' + JSON.stringify(oResponse)); }
					} // if display value
				} else {
					if (this.bLog) { gs.error('MappingConfigLookup.processBusinessRule cannot connect to remote system or record not found or no display value found: ' + JSON.stringify(oResponse)); }
				} // if lookup successful
			} else {
				if (this.bLog) { gs.error('MappingConfigLookup.processBusinessRule conn & cred alias not found.'); }
			} // no lookup possible
		} catch (oEx) {
			gs.error('MappingConfigLookup.processBusinessRule failed with error: ' + String(oEx));
		} // try
	}, // function processBusinessRule

	type: 'MappingConfigLookup',
	version: '1.0.5',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-04-11 05:32:52</sys_created_on>
        <sys_id>6ee07430dbe18e108152d03cd39619e9</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>MappingConfigLookup</sys_name>
        <sys_package display_value="Mapping Configuration Manager" source="x_snc_mapping_cm">1dec04abdbd50a108152d03cd39619cb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Mapping Configuration Manager">1dec04abdbd50a108152d03cd39619cb</sys_scope>
        <sys_update_name>sys_script_include_6ee07430dbe18e108152d03cd39619e9</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-04-13 15:02:41</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>6ee07430dbe18e108152d03cd39619e9</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-08-15 19:25:52</sys_created_on>
        <sys_id>9c586c651b081a10e50ddc61ab4bcbcf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-08-15 19:25:52</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
