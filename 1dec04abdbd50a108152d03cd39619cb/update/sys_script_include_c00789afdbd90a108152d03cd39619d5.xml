<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_mapping_cm.MappingConfigApply</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Apply mapped values to parent table fields</description>
        <mobile_callable>false</mobile_callable>
        <name>MappingConfigApply</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var MappingConfigApply = Class.create();
MappingConfigApply.prototype = {
	initialize: function () {
		this.bLog = false;
		this._mapCfgCommon = new MappingConfigCommon();
		this._gt = new global.GlobalTools();
		this._gtRecordRead = new global.GlobalToolsRecordRead();
		this._gtTable = new global.GlobalToolsTable();
	}, // function initialize

	// BR MappingApplyConfigApproved
	processBusinessRule: function (grMappingCfg, grMappingCfgOld) {
		if (grMappingCfg.operation() == 'update') {
			var sMappingCfgId = grMappingCfg.getUniqueValue();
			var sChoiceField = grMappingCfg.getValue('choice_field');
			var sSourceValue = grMappingCfg.getValue('source_value');
			var sTargetValue = grMappingCfg.getValue('target_value');
			if (sChoiceField) {
				var grChoice = new GlideRecord('sys_choice');
				if (grChoice.get(sTargetValue)) {
					sTargetValue = grChoice.getValue('value');
				} // if choice
			} // if choice field
			var sTargetValueEmpty = (grMappingCfg.getValue('target_value_empty') == '1') ? true : false;
			if (sTargetValueEmpty) {
				sTargetValue = '';
			} // if target is empty
			var sTargetValue2 = grMappingCfg.getValue('target_value_2');
			var sDependentQuery = this._mapCfgCommon.getDependentQuery(grMappingCfg);
			var aParentTables = String(grMappingCfg.getValue('parent_tables')).split(',');
			var sScheduledName = '';
			aParentTables.forEach(function (sParentTableId) {
				var sParentTable = this._gtTable.getTableName(sParentTableId);
				var grAffectedTable = new GlideRecord('x_snc_mapping_cm_affected_table');
				var sQuery = 'active=true^affected_table=' + sParentTable + '^choice_table=' + grMappingCfg.getValue('choice_table');
				if (sChoiceField) {
					sQuery += '^choice_field=' + sChoiceField;
				} // if choice field
				grAffectedTable.addEncodedQuery(sQuery);
				grAffectedTable.query();
				if (grAffectedTable.next()) {
					sScheduledName = 'MappingConfigApply_' + sParentTable + '_' + grMappingCfg.getValue('choice_table');
					sScheduledName = (sChoiceField) ? sScheduledName + '_' + sChoiceField : sScheduledName;
					this._gt.scheduleScript('x_snc_mapping_cm.MappingConfigApply', 'runJob', 1, [sMappingCfgId, grAffectedTable.getUniqueValue(), sSourceValue, sTargetValue, sTargetValue2, sDependentQuery], [], sScheduledName + '_' + sMappingCfgId);
				} // if affected table
			}, this); // each table
			grMappingCfg.setValue('apply_job_status', 'running');
			grMappingCfg.update();
		} // if update
	}, // function processBusinessRule

	runJob: function (sMappingCfgId, sAffectedTableId, sSourceValue, sTargetValue, sTargetValue2, sDependentQuery) {
		try {
			var grAffectedTable = new GlideRecord('x_snc_mapping_cm_affected_table');
			if (grAffectedTable.get(sAffectedTableId)) {
				grAffectedTable.setValue('apply_job_status', 'running');
				grAffectedTable.setWorkflow(false);
				grAffectedTable.autoSysFields(false);
				grAffectedTable.update();
				grAffectedTable.get(sAffectedTableId);
				var iUpdateCount = 0;
				var iErrorCount = 0;
				var sParentTable = grAffectedTable.getValue('affected_table');
				var bWorkflow = grAffectedTable.getValue('apply_workflow');
				var bAutoSysFields = grAffectedTable.getValue('apply_autosysfield');
				var bUseEngines = grAffectedTable.getValue('apply_useengine');
				var aQuery = [];
				var aFields = this._mapCfgCommon.getTargetFields(grAffectedTable.getValue('affected_fields'));
				var aFields2 = this._mapCfgCommon.getTargetFields(grAffectedTable.getValue('affected_fields_2'));
				aFields.forEach(function (sField) {
					aQuery.push(sField + '=' + sSourceValue);
				}, this); // each field
				sDependentQuery = (sDependentQuery) ? sDependentQuery + '^' : '';
				var grTable = this._gtRecordRead.getRecords(sParentTable, sDependentQuery + aQuery.join('^OR'), '', '', '', bWorkflow, bAutoSysFields, false, bUseEngines);
				if (grTable) {
					while (grTable._next()) {
						var bChanged = false;
						var bChangedRefField = false;
						aFields.forEach(function (sField) {
							var sCurrentValue = grTable.getValue(sField);
							if (sCurrentValue) {
								if (sCurrentValue == sSourceValue) {
									grTable.setValue(sField, sTargetValue);
									bChanged = true;
									bChangedRefField = true;
								} else if (sCurrentValue.indexOf(sSourceValue) != -1) {
									sCurrentValue = sCurrentValue.replace(sSourceValue, sTargetValue);
									grTable.setValue(sField, sCurrentValue);
									bChanged = true;
								} // value is source value or in list
							} // if current value
						}, this); // each field
						if (bChangedRefField) {
							aFields2.forEach(function (sField) {
								grTable.setValue(sField, sTargetValue2);
							}, this); // each field 2
						} // if changed ref field
						if (bChanged) {
							if (grTable.update()) {
								iUpdateCount++;
								if (this.bLog) { gs.error('MappingConfigApply.runJob updating record: ' + grTable.getUniqueValue() + ' aFields: ' + aFields.join(', ') + ' sSourceValue: ' + sSourceValue + ' sTargetValue: ' + sTargetValue); }
							} else {
								iErrorCount++;
								gs.error('MappingConfigApply.runJob error updating record: ' + grTable.getUniqueValue() + ' aFields: ' + aFields.join(', ') + ' sSourceValue: ' + sSourceValue + ' sTargetValue: ' + sTargetValue + ' error: ' + grTable.getLastErrorMessage());
							} // if update error
						} // if changed
					} // while records found
				} // if records found
				if (this.bLog) { gs.error('MappingConfigApply.runJob finished iUpdateCount: ' + String(iUpdateCount) + ' iErrorCount: ' + String(iErrorCount)); }
				grAffectedTable.setValue('apply_job_status', 'completed');
				grAffectedTable.setWorkflow(false);
				grAffectedTable.autoSysFields(false);
				grAffectedTable.update();
				var sQuery = 'sys_id!=' + sAffectedTableId + '^apply_job_status=running^choice_table=' + grAffectedTable.getValue('choice_table');
				var sChoiceField = grAffectedTable.getValue('choice_field');
				if (sChoiceField) {
					sQuery += '^choice_field=' + sChoiceField;
				} // if choice field
				var grAffectedTableRunning = new GlideRecord('x_snc_mapping_cm_affected_table');
				grAffectedTableRunning.addEncodedQuery(sQuery);
				grAffectedTableRunning.query();
				if (!grAffectedTableRunning.hasNext()) {
					var grMappingCfg = new GlideRecord('x_snc_mapping_cm_mapping_config');
					if (grMappingCfg.get(sMappingCfgId)) {
						grMappingCfg.setValue('apply_job_status', 'completed');
						grMappingCfg.setWorkflow(false);
						grMappingCfg.autoSysFields(false);
						grMappingCfg.update();
					} // if mapping found
				} // if all jobs finished, update mapping
			} // if affected table
		} catch (oEx) {
			gs.error('MappingConfigApply.runJob failed with error: ' + String(oEx));
		} // try
	}, // function runJob

	type: 'MappingConfigApply',
	version: '1.0.5',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-04-07 09:56:51</sys_created_on>
        <sys_id>c00789afdbd90a108152d03cd39619d5</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>MappingConfigApply</sys_name>
        <sys_package display_value="Mapping Configuration Manager" source="x_snc_mapping_cm">1dec04abdbd50a108152d03cd39619cb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Mapping Configuration Manager">1dec04abdbd50a108152d03cd39619cb</sys_scope>
        <sys_update_name>sys_script_include_c00789afdbd90a108152d03cd39619d5</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-04-13 10:16:36</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c00789afdbd90a108152d03cd39619d5</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-08-15 19:19:48</sys_created_on>
        <sys_id>6be6e4e11b081a10e50ddc61ab4bcbe4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-08-15 19:19:48</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
