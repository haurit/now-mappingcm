<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_mapping_cm.MappingConfigApply</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Apply mapped values to parent table fields</description>
        <name>MappingConfigApply</name>
        <script><![CDATA[var MappingConfigApply = Class.create();
MappingConfigApply.prototype = {
	initialize: function () {
		this.bLog = false;
		this._gt = new global.GlobalTools();
		this._gtRecordRead = new global.GlobalToolsRecordRead();
	}, // function initialize

	processBusinessRule: function (grMappingCfg, grMappingCfgOld) {
		var sSourceValue = grMappingCfg.getValue('source_value');
		var sTargetValue = grMappingCfg.getValue('target_value');
		var sChoiceField = grMappingCfg.getValue('choice_field');
		var aParentTables = String(grMappingCfg.getValue('parent_tables')).split(',');
		aParentTables.forEach(function (sParentTable) {
			var grAffectedTable = new GlideRecord('x_snc_mapping_cm_affected_table');
			var sQuery = 'affected_table=' + sParentTable + '^choice_table=' + grMappingCfg.getValue('choice_table');
			if (sChoiceField) {
				sQuery += '^choice_field=' + sChoiceField;
			} // if choice field
			grAffectedTable.addEncodedQuery(sQuery);
			grAffectedTable.query();
			if (grAffectedTable.next()) {
				this._gt.scheduleScript('x_snc_mapping_cm.MappingConfigApply', 'runJob', 1, [grAffectedTable.getUniqueValue(), sSourceValue, sTargetValue], [], 'MappingConfigApply_' + sParentTable + '_' + grMappingCfg.getValue('choice_table') + '_' + sChoiceField);
			} // if affected table
		}, this); // each table
	}, // function processBusinessRule

	runJob: function (sAffectedTableId, sSourceValue, sTargetValue) {
		try {
			var grAffectedTable = new GlideRecord('x_snc_mapping_cm_affected_table');
			if (grAffectedTable.get(sAffectedTableId)) {
				var iUpdateCount = 0;
				var iErrorCount = 0;
				var sParentTable = grAffectedTable.getValue('affected_table');
				var bWorkflow = grAffectedTable.getValue('apply_workflow');
				var bAutoSysFields = grAffectedTable.getValue('apply_autosysfield');
				var bUseEngines = grAffectedTable.getValue('apply_useengine');
				var aQuery = [];
				var aFields = [];
				var grDict = new GlideRecord('sys_dictionary');
				grDict.addEncodedQuery('sys_idIN' + grAffectedTable.getValue('affected_fields'));
				grDict.query();
				while (grDict.next()) {
					aFields.push(grDict.getValue('element'));
					aQuery.push(grDict.getValue('element') + '=' + sSourceValue);
				} // while fields
				var grTable = this._gtRecordRead.getRecords(sParentTable, aQuery.join('^OR'), '', '', '', bWorkflow, bAutoSysFields, false, bUseEngines);
				if (grTable) {
					while (grTable._next()) {
						var bChanged = false;
						aFields.forEach(function (sField) {
							var sCurrentValue = grTable.getValue(sField);
							// check for glide list records
							if (sCurrentValue == sSourceValue) {
								grTable.setValue(sField, sTargetValue);
								bChanged = true;
							} else if (sCurrentValue.indexOf(sSourceValue) != -1) {
								sCurrentValue = sCurrentValue.replace(sSourceValue, sTargetValue);
								grTable.setValue(sField, sCurrentValue);
								bChanged = true;
							} // value is source value
						}, this); // each field
						if (bChanged) {
							if (grTable.update()) {
								iUpdateCount++;
								if (this.bLog) {gs.error('MappingConfigApply.runJob updating record: ' + grTable.getUniqueValue() + ' aFields: ' + aFields.join(', ') + ' sSourceValue: ' + sSourceValue + ' sTargetValue: ' + sTargetValue);}
							} else {
								iErrorCount++;
								gs.error('MappingConfigApply.runJob error updating record: ' + grTable.getUniqueValue() + ' aFields: ' + aFields.join(', ') + ' sSourceValue: ' + sSourceValue + ' sTargetValue: ' + sTargetValue + ' error: ' + grTable.getLastErrorMessage());
							} // if update error
						} // if changed
					} // while records found
				} // if records found
				if (this.bLog) {gs.error('MappingConfigApply.runJob finished iUpdateCount: ' + String(iUpdateCount) + ' iErrorCount: ' + String(iErrorCount));}
			} // if affected table
		} catch (oEx) {
			gs.error('MappingConfigApply.runJob failed with error: ' + String(oEx));
		} // try
	}, // function runJob

	type: 'MappingConfigApply',
	version: '1.0.0',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-04-07 09:56:51</sys_created_on>
        <sys_id>c00789afdbd90a108152d03cd39619d5</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>MappingConfigApply</sys_name>
        <sys_package display_value="Mapping Configuration Manager" source="x_snc_mapping_cm">1dec04abdbd50a108152d03cd39619cb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Mapping Configuration Manager">1dec04abdbd50a108152d03cd39619cb</sys_scope>
        <sys_update_name>sys_script_include_c00789afdbd90a108152d03cd39619d5</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-04-10 14:29:16</sys_updated_on>
    </sys_script_include>
</record_update>
